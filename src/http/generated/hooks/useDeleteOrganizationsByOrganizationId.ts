/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  DeleteOrganizationsByOrganizationIdMutationResponse,
  DeleteOrganizationsByOrganizationIdPathParams,
} from '../types/DeleteOrganizationsByOrganizationId.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteOrganizationsByOrganizationIdMutationKey = () => [{ url: '/organizations/:organizationId' }] as const

export type DeleteOrganizationsByOrganizationIdMutationKey = ReturnType<typeof deleteOrganizationsByOrganizationIdMutationKey>

/**
 * {@link /organizations/:organizationId}
 */
export async function deleteOrganizationsByOrganizationId(
  organizationId: DeleteOrganizationsByOrganizationIdPathParams['organizationId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<DeleteOrganizationsByOrganizationIdMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/organizations/${organizationId}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

/**
 * {@link /organizations/:organizationId}
 */
export function useDeleteOrganizationsByOrganizationId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteOrganizationsByOrganizationIdMutationResponse,
      ResponseErrorConfig<Error>,
      { organizationId: DeleteOrganizationsByOrganizationIdPathParams['organizationId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteOrganizationsByOrganizationIdMutationKey()

  return useMutation<
    DeleteOrganizationsByOrganizationIdMutationResponse,
    ResponseErrorConfig<Error>,
    { organizationId: DeleteOrganizationsByOrganizationIdPathParams['organizationId'] },
    TContext
  >(
    {
      mutationFn: async ({ organizationId }) => {
        return deleteOrganizationsByOrganizationId(organizationId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}