/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type {
  PatchOrganizationsByOrganizationIdMutationRequest,
  PatchOrganizationsByOrganizationIdMutationResponse,
  PatchOrganizationsByOrganizationIdPathParams,
} from '../types/PatchOrganizationsByOrganizationId.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const patchOrganizationsByOrganizationIdMutationKey = () => [{ url: '/organizations/:organizationId' }] as const

export type PatchOrganizationsByOrganizationIdMutationKey = ReturnType<typeof patchOrganizationsByOrganizationIdMutationKey>

/**
 * {@link /organizations/:organizationId}
 */
export async function patchOrganizationsByOrganizationId(
  organizationId: PatchOrganizationsByOrganizationIdPathParams['organizationId'],
  data?: PatchOrganizationsByOrganizationIdMutationRequest,
  config: Partial<RequestConfig<PatchOrganizationsByOrganizationIdMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<PatchOrganizationsByOrganizationIdMutationResponse, ResponseErrorConfig<Error>, PatchOrganizationsByOrganizationIdMutationRequest>({
    method: 'PATCH',
    url: `/organizations/${organizationId}`,
    baseURL: 'http://localhost:3333',
    data: requestData,
    ...requestConfig,
  })
  return res.data
}

/**
 * {@link /organizations/:organizationId}
 */
export function usePatchOrganizationsByOrganizationId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PatchOrganizationsByOrganizationIdMutationResponse,
      ResponseErrorConfig<Error>,
      { organizationId: PatchOrganizationsByOrganizationIdPathParams['organizationId']; data?: PatchOrganizationsByOrganizationIdMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PatchOrganizationsByOrganizationIdMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? patchOrganizationsByOrganizationIdMutationKey()

  return useMutation<
    PatchOrganizationsByOrganizationIdMutationResponse,
    ResponseErrorConfig<Error>,
    { organizationId: PatchOrganizationsByOrganizationIdPathParams['organizationId']; data?: PatchOrganizationsByOrganizationIdMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ organizationId, data }) => {
        return patchOrganizationsByOrganizationId(organizationId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}