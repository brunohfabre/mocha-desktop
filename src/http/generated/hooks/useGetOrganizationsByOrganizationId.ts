/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { GetOrganizationsByOrganizationIdQueryResponse, GetOrganizationsByOrganizationIdPathParams } from '../types/GetOrganizationsByOrganizationId.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getOrganizationsByOrganizationIdQueryKey = (organizationId: GetOrganizationsByOrganizationIdPathParams['organizationId']) =>
  [{ url: '/organizations/:organizationId', params: { organizationId: organizationId } }] as const

export type GetOrganizationsByOrganizationIdQueryKey = ReturnType<typeof getOrganizationsByOrganizationIdQueryKey>

/**
 * {@link /organizations/:organizationId}
 */
export async function getOrganizationsByOrganizationId(
  organizationId: GetOrganizationsByOrganizationIdPathParams['organizationId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetOrganizationsByOrganizationIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/organizations/${organizationId}`,
    baseURL: 'http://localhost:3333',
    ...requestConfig,
  })
  return res.data
}

export function getOrganizationsByOrganizationIdQueryOptions(
  organizationId: GetOrganizationsByOrganizationIdPathParams['organizationId'],
  config: Partial<RequestConfig> & { client?: typeof fetch } = {},
) {
  const queryKey = getOrganizationsByOrganizationIdQueryKey(organizationId)
  return queryOptions<
    GetOrganizationsByOrganizationIdQueryResponse,
    ResponseErrorConfig<Error>,
    GetOrganizationsByOrganizationIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!organizationId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getOrganizationsByOrganizationId(organizationId, config)
    },
  })
}

/**
 * {@link /organizations/:organizationId}
 */
export function useGetOrganizationsByOrganizationId<
  TData = GetOrganizationsByOrganizationIdQueryResponse,
  TQueryData = GetOrganizationsByOrganizationIdQueryResponse,
  TQueryKey extends QueryKey = GetOrganizationsByOrganizationIdQueryKey,
>(
  organizationId: GetOrganizationsByOrganizationIdPathParams['organizationId'],
  options: {
    query?: Partial<QueryObserverOptions<GetOrganizationsByOrganizationIdQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getOrganizationsByOrganizationIdQueryKey(organizationId)

  const query = useQuery(
    {
      ...getOrganizationsByOrganizationIdQueryOptions(organizationId, config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}